# i was bored of writing a proper compiler so
# here is a "temporary" one until i write
# a real one.
#
# edit: i'll probably end up keeping this
# so get used to this un-modular,
# poorly commented, ugly lump of code.
# plus it's full of cryptically named vars.
# enjoy.

import sys
import mutth

f_in = sys.argv[1]
f_out = sys.argv[0]

with open(f_in,"r") as r_file:
    m_src = r_file.read()

# last line indent level
lind_lvl = 0
# are we currently in a string
in_str = False
# string start line
str_start = 0
# these are both the position in the file
# FIXME: line number is calculated incorrectly:
# if you skip over \n ex: while examining an
# if statement
#
# solution: add a get_line function
cursor = 0

simple_st = ["if","elif","while","switch"]

# this block contains reserved words
mutt_mcr = """/* auto generated by mutt */
#define elif else if
#define not !
#define and &&
#define or ||
#define true 1
#define false 0
#define bool _Bool
/* src begins here */

"""

# TODO: eliminate short/abbreviated names in this and mutth
# TODO: add muttcln to clean up files with:
#  - comment remover
#  - space to indent detector and converter
#  - namespace handler (MAYBE)
# TODO: header generation and import
# TODO: structs, enums, and auto typedefs
# TODO: @flags
# TODO: get_line
# TODO: add function closing
# TODO: fix switch fallthrough
# TODO: auto include generated header
# TODO: standardize cursor start and finish in mutth functions

# begin compilation
while(cursor<len(m_src)):
    # this is string thing
    chara=m_src[cursor]
    if chara == "\"" and not m_src[cursor-1] == "\\":
        in_str = not in_str
        # FIXME: set line number
        str_start = 0
    elif chara == "\t" and m_src[cursor-1] == "\n":
        # TODO: handle indentation and semicolons
        pass
    elif not in_str:
        start,finish,word = mutth.get_next_word(m_src,cursor)
        if word in simple_st:
            cursor = finish
            m_src = mutth.insert_at(m_src,"(",cursor)
            # TODO: handle possible errors
            close_if = mutth.get_statement(m_src,cursor)
            m_src = mutth.set_at(m_src,")",close_if)
            m_src = mutth.insert_at(m_src,"{",close_if+1)
            cursor = close_if+1
        elif word == "else":
            cursor = finish
            # TODO: handle possible errors
            close_if = mutth.get_statement(m_src,cursor)
            m_src = mutth.chop_at(m_src,close_if,close_if+1)
            # since we cut a letter out the cursor is now ahead by one 
            m_src = mutth.insert_at(m_src,"{",close_if)
        elif word in ["case","default"]:
            cursor = finish
            # TODO: handle possible errors
            close_if = mutth.get_statement(m_src,cursor)
            # cases have their own scope
            # TODO: prevent fallthrough by adding break
            m_src = mutth.insert_at(m_src,"{",close_if+1)
            cursor = close_if+1
        elif word in ["var", "const"]:
            # TODO: add comments in this area
            cursor = start
            const = "const" if word.replace(" ","").replace("\t","") == "const" else ""
            def_p = mutth.get_var_declaration_end(m_src,finish)
            name_start,name_end,name = mutth.get_next_word(m_src,finish)
            var = m_src[name_start:def_p]
            var = var.split(":")
            if not len(var) == 2:
                print("you forgot to give your variable a type :(")
                sys.exit(-1)
            def_start, def_end, vdef = mutth.get_var_definition(m_src, cursor)
            mod_src = mutth.chop_at(m_src,cursor,def_end)
            mod_src = mutth.insert_at(mod_src, f"{const} {var[1]} {name} {vdef} \n",cursor)
            step = len(mod_src)-len(m_src)
            m_src = mod_src
            cursor = mutth.get_semicolon(m_src,cursor)+1
            m_src = mutth.insert_at(m_src,";",cursor-1)
        elif word == "func":
            cursor = start
            m_src = mutth.chop_at(m_src,start,finish)
            name_start,name_end,name = mutth.get_next_word(m_src,cursor)
            # get the section of the function in parentheses
            p_start,p_end,inner_str = mutth.get_function_arguments_contents(m_src,cursor)
            c_args = mutth.get_c_args(inner_str)
            # get the return type
            # FIXME: currently only gets the next word so
            # functions cant return something like: struct my_struct *
            rtrn_s,rtrn_e,return_type = mutth.get_next_word(m_src,p_end)
            # get end of function
            f_end = mutth.get_function_end(m_src,rtrn_s)
            # create the code
            o_sz = len(m_src)
            m_src = mutth.chop_at(m_src,p_end+1,f_end)
            m_src = mutth.insert_at(m_src,"{",p_end+1)
            m_src = mutth.chop_at(m_src,p_start,p_end+1)
            m_src = mutth.insert_at(m_src,f"({c_args})",p_start)
            m_src = mutth.insert_at(m_src,return_type,cursor)
            # move our cursor to the next section
            delta_sz = len(m_src)-o_sz
            cursor = f_end+delta_sz
            if(not mutth.block_line(m_src,cursor)):
                print("please do not place code on the same line as the function")
                print("sic em' mutt!")
                # refuse to compile
                sys.exit(-1)
        else:
            # FIXME: adds a semicolon to the end of the file. 
            cursor = start
            cursor = mutth.get_semicolon(m_src,cursor)+1
            m_src = mutth.insert_at(m_src,";",cursor-1)
    cursor += 1

# add the headers and remove returns
#m_src = m_src.replace("\n","")
m_src = mutt_mcr+m_src
print(m_src)

if in_str:
    print(f"unclosed string starting on line: {str_start}")
